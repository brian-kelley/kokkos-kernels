

IF(COMMAND TRIBITS_PACKAGE_DECL)
  SET(KOKKOS_HAS_TRILINOS ON CACHE BOOL "")
ELSE()
  SET(KOKKOS_HAS_TRILINOS OFF CACHE BOOL "")
ENDIF()

GET_DIRECTORY_PROPERTY(KOKKOSKERNELS_HAS_PARENT PARENT_DIRECTORY)


IF(NOT KOKKOSKERNELS_HAS_TRILINOS)
  cmake_minimum_required(VERSION 3.10 FATAL_ERROR)
  IF (Spack_WORKAROUND) 
    #if we are explicitly using Spack for development,
    #nuke the Spack compiler
    SET(SPACK_CXX $ENV{SPACK_CXX})
    IF(SPACK_CXX)
      SET(CMAKE_CXX_COMPILER ${SPACK_CXX} CACHE STRING "the C++ compiler" FORCE)
      SET(ENV{CXX} ${SPACK_CXX})
    ENDIF()
  ENDif()
  IF(NOT DEFINED ${PROJECT_NAME})
    PROJECT(KokkosKernels CXX)
  ENDIF()
  SET(KokkosKernels_VERSION_MAJOR 3)
  SET(KokkosKernels_VERSION_MINOR 0)
  SET(KokkosKernels_VERSION_PATCH 0)
ENDIF()

GET_DIRECTORY_PROPERTY(KOKKOS_HAS_PARENT PARENT_DIRECTORY)
IF (KOKKOS_HAS_TRILINOS)
 SET(TRILINOS_INCDIR ${CMAKE_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_INCLUDE_DIR})
 SET(KOKKOSKERNELS_HEADER_DIR ${TRILINOS_INCDIR})
ELSEIF(KOKKOS_HAS_PARENT)
 SET(KOKKOSKERNELS_HEADER_DIR "include/kokkos-kernels")
 SET(KOKKOS_DEPENDENCY_NAME kokkos) #depend directly on library
 SET(KOKKOSKERNELS_TARGET_NAME KokkosTargets)
ELSE()
 FIND_PACKAGE(Kokkos REQUIRED)
 SET(KOKKOSKERNELS_HEADER_DIR "include")
 SET(KOKKOS_DEPENDENCY_NAME Kokkos::kokkos) #depend on installed library
 SET(KOKKOSKERNELS_TARGET_NAME KokkosKernelsTargets)
ENDIF()

INCLUDE(cmake/fake_tribits.cmake)
INCLUDE(cmake/kokkoskernels_tribits.cmake)

#
# Define the package
#
KOKKOSKERNELS_PACKAGE()

# If building in debug mode, define the HAVE_KOKKOSKERNELS_DEBUG macro.
KOKKOS_ADD_DEBUG_OPTION()

#
# Set up subpackage-specific configuration options
#
IF(NOT KOKKOSKERNELS_HAS_TRILINOS AND NOT KOKKOSKERNELS_HAS_PARENT)
 FIND_PACKAGE(Kokkos REQUIRED)
 MESSAGE("Kokkos_ENABLE_CUDA     ${Kokkos_ENABLE_CUDA}")
 MESSAGE("Kokkos_ENABLE_OpenMP   ${Kokkos_ENABLE_OpenMP}")
 MESSAGE("Kokkos_ENABLE_PTHREAD  ${Kokkos_ENABLE_PTHREAD}")
 MESSAGE("Kokkos_ENABLE_SERIAL   ${Kokkos_ENABLE_SERIAL}")
ENDIF()

#
# "Optimization level" for KokkosKernels computational kernels.  The
# higher the level, the more code variants get generated, and thus the
# longer the compile times.  However, more code variants mean both
# better performance overall, and more uniform performance for corner
# cases.  Values of current interest (24 Apr 2014) are 0, 1, and 2.
#
KOKKOS_ADD_OPTION_AND_DEFINE(KokkosKernels_LINALG_OPT_LEVEL
  KOKKOSLINALG_OPT_LEVEL
  "Optimization level for KokkosKernels computational kernels: a nonnegative integer.  Higher levels result in better performance that is more uniform for corner cases, but increase build time and library size.  The default value is 1, which should give performance within ten percent of optimal on most platforms, for most problems."
  "1"
  )



# Enable experimental features of KokkosKernels if set at configure
# time. Default is no.
KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_ENABLE_EXPERIMENTAL
  HAVE_KOKKOSKERNELS_EXPERIMENTAL
  "Enable building and installation of experimental KokkosKernels features."
  NO )

# Define what execution spaces KokkosKernels enables.
# KokkosKernels may enable fewer execution spaces than
# Kokkos enables.  This can reduce build and test times.

ASSERT_DEFINED (Kokkos_ENABLE_CUDA)
ASSERT_DEFINED (Kokkos_ENABLE_OPENMP)
ASSERT_DEFINED (Kokkos_ENABLE_PTHREAD)
ASSERT_DEFINED (Kokkos_ENABLE_SERIAL)
SET(${PACKAGE_NAME}_INST_EXECSPACE_CUDA_DEFAULT ${Kokkos_ENABLE_CUDA})
SET(${PACKAGE_NAME}_INST_EXECSPACE_OPENMP_DEFAULT ${Kokkos_ENABLE_OPENMP})
SET(${PACKAGE_NAME}_INST_EXECSPACE_THREADS_DEFAULT ${Kokkos_ENABLE_PTHREAD})
SET(${PACKAGE_NAME}_INST_EXECSPACE_SERIAL_DEFAULT ${Kokkos_ENABLE_SERIAL})

IF(${Kokkos_ENABLE_Cuda})
KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_EXECSPACE_CUDA
  KOKKOSKERNELS_INST_EXECSPACE_CUDA
  "Whether to pre instantiate kernels for the execution space Kokkos::Cuda.  This option is KokkosKernels_INST_EXECSPACE_CUDA=${Kokkos_ENABLE_Cuda} by default.  Disabling this when Kokkos_ENABLE_Cuda is enabled may increase build times."
  ${${PACKAGE_NAME}_INST_EXECSPACE_CUDA_DEFAULT}
  )
KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_MEMSPACE_CUDAUVMSPACE
  KOKKOSKERNELS_INST_MEMSPACE_CUDAUVMSPACE
  "Whether to pre instantiate kernels for the memory space Kokkos::CudaUVMSpace.  This option is KokkosKernels_INST_EXECSPACE_CUDAUVMSPACE=${Kokkos_ENABLE_Cuda} by default.  Disabling this when Kokkos_ENABLE_Cuda is enabled may increase build times."
  ${${PACKAGE_NAME}_INST_EXECSPACE_CUDA_DEFAULT}
  )
KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_MEMSPACE_CUDASPACE
  KOKKOSKERNELS_INST_MEMSPACE_CUDASPACE
  "Whether to pre instantiate kernels for the memory space Kokkos::CudaSpace.  This option is KokkosKernels_INST_EXECSPACE_CUDASPACE=${Kokkos_ENABLE_Cuda} by default.  Disabling this when Kokkos_ENABLE_Cuda is enabled may increase build times."
  ${${PACKAGE_NAME}_INST_EXECSPACE_CUDA_DEFAULT}
  )

  IF(${${PACKAGE_NAME}_INST_EXECSPACE_CUDA} AND ${${PACKAGE_NAME}_INST_MEMSPACE_CUDASPACE})
    LIST(APPEND DEVICE_LIST "<Cuda,CudaSpace>")
  ENDIF()
  IF(${${PACKAGE_NAME}_INST_EXECSPACE_CUDA} AND ${${PACKAGE_NAME}_INST_MEMSPACE_CUDAUVMSPACE})
    LIST(APPEND DEVICE_LIST "<Cuda,CudaUVMSpace>")
  ENDIF()

  IF( Trilinos_ENABLE_COMPLEX_DOUBLE AND ((NOT DEFINED CMAKE_CXX_USE_RESPONSE_FILE_FOR_OBJECTS) OR (NOT CMAKE_CXX_USE_RESPONSE_FILE_FOR_OBJECTS)) )
    MESSAGE( WARNING "The CMake option CMAKE_CXX_USE_RESPONSE_FILE_FOR_OBJECTS is either undefined or OFF.  Please set CMAKE_CXX_USE_RESPONSE_FILE_FOR_OBJECTS:BOOL=ON when building with CUDA and complex double enabled.")
  ENDIF()

ENDIF()

<<<<<<< HEAD
IF(${Kokkos_ENABLE_Serial} OR ${Kokkos_ENABLE_Pthread} OR ${Kokkos_ENABLE_OpenMP})
KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_MEMSPACE_HOSTSPACE
  KOKKOSKERNELS_INST_MEMSPACE_HOSTSPACE
  "Whether to pre instantiate kernels for the memory space Kokkos::HostSpace.  This option is KokkosKernels_INST_EXECSPACE_HOSTSPACE=(${Kokkos_ENABLE_OpenMP} OR ${Kokkos_ENABLE_Pthread} OR ${Kokkos_ENABLE_Serial}) by default.  Disabling this when one of the Host execution spaces is enabled may increase build times."
=======
IF(Kokkos_ENABLE_SERIAL OR Kokkos_ENABLE_PTHREAD OR Kokkos_ENABLE_OPENMP)
KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_MEMSPACE_HOSTSPACE
  KOKKOSKERNELS_INST_MEMSPACE_HOSTSPACE
  "Whether to pre instantiate kernels for the memory space Kokkos::HostSpace.  This option is KokkosKernels_INST_EXECSPACE_HOSTSPACE=(${Kokkos_ENABLE_OPENMP} OR ${Kokkos_ENABLE_PTHREAD} OR ${Kokkos_ENABLE_SERIAL}) by default.  Disabling this when one of the Host execution spaces is enabled may increase build times."
>>>>>>> trilinos promotion fixes
  ON
  )
ENDIF()

<<<<<<< HEAD
IF(${Kokkos_ENABLE_OpenMP})
=======
IF(Kokkos_ENABLE_OPENMP)
>>>>>>> trilinos promotion fixes
KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_EXECSPACE_OPENMP
  KOKKOSKERNELS_INST_EXECSPACE_OPENMP
  "Whether to pre instantiate kernels for the execution space Kokkos::OpenMP.  This option is KokkosKernels_INST_EXECSPACE_OPENMP=${Kokkos_ENABLE_OPENMP} by default.  Disabling this when Kokkos_ENABLE_OPENMP is enabled may increase build times."
  ${${PACKAGE_NAME}_INST_EXECSPACE_OPENMP_DEFAULT}
  )
  IF(${${PACKAGE_NAME}_INST_EXECSPACE_OPENMP} AND ${${PACKAGE_NAME}_INST_MEMSPACE_HOSTSPACE})
    LIST(APPEND DEVICE_LIST "<OpenMP,HostSpace>")
  ENDIF()
ENDIF()


IF(${Kokkos_ENABLE_Pthread})
KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_EXECSPACE_THREADS
  KOKKOSKERNELS_INST_EXECSPACE_THREADS
  "Whether to build kernels for the execution space Kokkos::Threads.  This option is Kokkos_ENABLE_Pthread=${Kokkos_ENABLE_Pthread} by default.  If explicit template instantiation (ETI) is enabled in Trilinos, disabling this when Kokkos_ENABLE_Pthread is enabled may increase build times."
  ${${PACKAGE_NAME}_INST_EXECSPACE_THREADS_DEFAULT}
  )
  IF(${${PACKAGE_NAME}_INST_EXECSPACE_THREADS} AND ${${PACKAGE_NAME}_INST_MEMSPACE_HOSTSPACE})
    LIST(APPEND DEVICE_LIST "<Threads,HostSpace>")
  ENDIF()
ENDIF()


IF(${Kokkos_ENABLE_Serial})
KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_EXECSPACE_SERIAL
  KOKKOSKERNELS_INST_EXECSPACE_SERIAL
  "Whether to build kernels for the execution space Kokkos::Serial.  This option is Kokkos_ENABLE_Serial=${Kokkos_ENABLE_Serial} by default.  If explicit template instantiation (ETI) is enabled in Trilinos, disabling this when Kokkos_ENABLE_Serial is enabled may increase build times."
  ${${PACKAGE_NAME}_INST_EXECSPACE_SERIAL_DEFAULT}
  )
  IF(${${PACKAGE_NAME}_INST_EXECSPACE_SERIAL} AND ${${PACKAGE_NAME}_INST_MEMSPACE_HOSTSPACE})
    LIST(APPEND DEVICE_LIST "<Serial,HostSpace>")
  ENDIF()
ENDIF()

# ==================================================================
# Enable Scalar Types for ETI
# ==================================================================

KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_ETI_ONLY
  KOKKOSKERNELS_ETI_ONLY
  "Whether to restrict availability of kernels to ETI types only. This is off by default, i.e. any type combination can be instantiated. Turning this on guarantees that kernels are never build inside of object files which simply call KokkosKernels functions."
  OFF
  )

KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_TEST_ETI_ONLY
  KOKKOSKERNELS_TEST_ETI_ONLY
  "Whether to restrict testing to ETI types."
  ON
  )

KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_DOUBLE
  KOKKOSKERNELS_INST_DOUBLE
  "Whether to pre instantiate kernels for the scalar type double.  This option is KokkosKernels_INST_DOUBLE=ON by default.  Disabling this may increase build times."
  ON
  )

IF (Trilinos_ENABLE_FLOAT)
  GLOBAL_SET(KokkosKernels_INST_FLOAT_DEFAULT  ON)
ELSE()
  GLOBAL_SET(KokkosKernels_INST_FLOAT_DEFAULT  OFF)
ENDIF()

KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_FLOAT
  KOKKOSKERNELS_INST_FLOAT
  "Whether to pre instantiate kernels for the scalar type float.  This option is KokkosKernels_INST_FLOAT=Trilinos_ENABLE_FLOAT by default.  Disabling this may increase build times."
  ${KokkosKernels_INST_FLOAT_DEFAULT}
  )

#Just leave the Trilinos logic here alone
#Outside of Trilinos, let the defaults be always OFF
IF (KokkosKernels_INST_DOUBLE AND Trilinos_ENABLE_COMPLEX_DOUBLE)
  GLOBAL_SET(KokkosKernels_INST_COMPLEX_DOUBLE_DEFAULT ON)
ELSE()
  GLOBAL_SET(KokkosKernels_INST_COMPLEX_DOUBLE_DEFAULT OFF)
ENDIF()
IF (KokkosKernels_INST_FLOAT AND Trilinos_ENABLE_COMPLEX_FLOAT)
  GLOBAL_SET(KokkosKernels_INST_COMPLEX_FLOAT_DEFAULT ON)
ELSE()
  GLOBAL_SET(KokkosKernels_INST_COMPLEX_FLOAT_DEFAULT OFF)
ENDIF()

KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_COMPLEX_DOUBLE
  KOKKOSKERNELS_INST_COMPLEX_DOUBLE
  "Whether to pre instantiate kernels for the scalar type complex<double>.  This option is KokkosKernels_INST_COMPLEX_DOUBLE=${Trilinos_ENABLE_COMPLEX_DOUBLE} by default.  Disabling this may increase build times."
  ${KokkosKernels_INST_COMPLEX_DOUBLE_DEFAULT}
  )

KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_COMPLEX_FLOAT
  KOKKOSKERNELS_INST_COMPLEX_FLOAT
  "Whether to pre instantiate kernels for the scalar type complex<float>.  This option is KokkosKernels_INST_COMPLEX_FLOAT=${Trilinos_ENABLE_COMPLEX_FLOAT} by default.  Disabling this may increase build times."
  ${KokkosKernels_INST_COMPLEX_FLOAT_DEFAULT}
  )

IF (KokkosKernels_INST_DOUBLE)
  LIST(APPEND SCALAR_LIST "double")
ENDIF()

IF (KokkosKernels_INST_FLOAT)
  LIST(APPEND SCALAR_LIST "float")
ENDIF()

IF (KokkosKernels_INST_COMPLEX_DOUBLE)
  LIST(APPEND SCALAR_LIST "complex<double>")
ENDIF()

IF (KokkosKernels_INST_FLOAT)
  LIST(APPEND SCALAR_LIST "complex<float>")
ENDIF()


KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_LAYOUTLEFT
  KOKKOSKERNELS_INST_LAYOUTLEFT
  "Whether to pre instantiate kernels for the view layout LayoutLeft.  This option is KokkosKernels_INST_LAYOUTLEFT=ON by default.  Disabling this may increase build times."
  ON
  )

KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_LAYOUTRIGHT
  KOKKOSKERNELS_INST_LAYOUTRIGHT
  "Whether to pre instantiate kernels for the view layout LayoutRight.  This option is KokkosKernels_INST_LAYOUTRIGHT=OFF by default.  Disabling this may increase build times."
  OFF
  )

# ==================================================================
# Enable Ordinal Types for ETI
# ==================================================================


GLOBAL_SET(KokkosKernels_INST_ORDINAL_INT_DEFAULT  ON)
GLOBAL_SET(KokkosKernels_INST_ORDINAL_INT64_T_DEFAULT  OFF)


KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_ORDINAL_INT
  KOKKOSKERNELS_INST_ORDINAL_INT
  "Whether to pre instantiate kernels for the ordinal type int.  This option is KokkosKernels_INST_ORDINAL_INT=ON by default."
  ${KokkosKernels_INST_ORDINAL_INT_DEFAULT}
  )

KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_ORDINAL_INT64_T
  KOKKOSKERNELS_INST_ORDINAL_INT64_T
  "Whether to pre instantiate kernels for the ordinal type int64_t.  This option is KokkosKernels_INST_ORDINAL_INT64_T=OFF by default."
  ${KokkosKernels_INST_ORDINAL_INT64_T_DEFAULT}
  )

IF (KokkosKernels_INST_ORDINAL_INT)
  LIST(APPEND ORDINAL_LIST "int")
ENDIF()

IF (KokkosKernels_INST_ORDINAL_INT64_T)
  LIST(APPEND ORDINAL_LIST "int64_t")
ENDIF()


# ==================================================================
# Enable Offset Types for ETI
# ==================================================================


GLOBAL_SET(KokkosKernels_INST_OFFSET_SIZE_T_DEFAULT  ON)
GLOBAL_SET(KokkosKernels_INST_OFFSET_INT_DEFAULT  ON)
#GLOBAL_SET(KokkosKernels_INST_OFFSET_INT64_T_DEFAULT  OFF)


KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_OFFSET_INT
  KOKKOSKERNELS_INST_OFFSET_INT
  "Whether to pre instantiate kernels for the offset type int.  This option is KokkosKernels_INST_OFFSET_INT=ON by default."
  ${KokkosKernels_INST_OFFSET_INT_DEFAULT}
  )

KOKKOS_ADD_OPTION_AND_DEFINE(
  ${PACKAGE_NAME}_INST_OFFSET_SIZE_T
  KOKKOSKERNELS_INST_OFFSET_SIZE_T
  "Whether to pre instantiate kernels for the offset type size_t.  This option is KokkosKernels_INST_OFFSET_SIZE_T=OFF by default."
  ${KokkosKernels_INST_OFFSET_SIZE_T_DEFAULT}
  )

IF (KokkosKernels_INST_OFFSET_INT)
  LIST(APPEND OFFSET_LIST "int")
ENDIF()

IF (KokkosKernels_INST_OFFSET_SIZE_T)
  LIST(APPEND OFFSET_LIST "size_t")
ENDIF()

# ==================================================================
# Enable Third Party Libraries
# ==================================================================

IF (DEFINED KOKKOSKERNELS_ENABLE_TPL_BLAS)
  # user overriding kokkoskernels
  IF (KOKKOSKERNELS_ENABLE_TPL_BLAS)
    IF (NOT TPL_ENABLE_BLAS)
      MESSAGE( WARNING "KOKKOSKERNELS_ENABLE_TPL_BLAS is ON but TPL_ENABLE_BLAS is OFF. Please set TPL_ENABLE_BLAS:BOOL=ON")
      SET(KOKKOSKERNELS_ENABLE_TPL_BLAS OFF)  
    ENDIF()
  ENDIF()
ELSE()
  # default behavior
  IF (TPL_ENABLE_BLAS)
    SET(KOKKOSKERNELS_ENABLE_TPL_BLAS ${TPL_ENABLE_BLAS})
  ENDIF()
ENDIF()

IF (DEFINED KOKKOSKERNELS_ENABLE_TPL_MKL)
  # user overriding kokkoskernels
  IF (KOKKOSKERNELS_ENABLE_TPL_MKL)
    IF (NOT TPL_ENABLE_MKL)
      MESSAGE( WARNING "KOKKOSKERNELS_ENABLE_TPL_MKL is ON but TPL_ENABLE_MKL is OFF. Please set TPL_ENABLE_MKL:BOOL=ON")
      SET(KOKKOSKERNELS_ENABLE_TPL_MKL OFF)  
    ENDIF()
  ENDIF()
ELSE()
  IF (TPL_ENABLE_MKL)
    SET(KOKKOSKERNELS_ENABLE_TPL_MKL ${TPL_ENABLE_MKL})
  ENDIF()
ENDIF()

IF(${Kokkos_ENABLE_Cuda})
  # CUBLAS is ON by default when CUDA is enabled
  IF (NOT DEFINED KOKKOSKERNELS_ENABLE_TPL_CUBLAS)  
    SET(KOKKOSKERNELS_ENABLE_TPL_CUBLAS ON)
  ENDIF()

  # Tribit provides TPL mechanism for CUSPARSE; thus, use it
  IF (DEFINED KOKKOSKERNELS_ENABLE_TPL_CUSPARSE)  
    IF (NOT TPL_ENABLE_CUSPARSE)
      MESSAGE( WARNING "KOKKOSKERNELS_ENABLE_TPL_CUSPARSE is ON but TPL_ENABLE_CUSPARSE is OFF. Please set TPL_ENABLE_CUSPARSE:BOOL=ON")
      SET(KOKKOSKERNELS_ENABLE_TPL_CUSPARSE OFF)  
    ENDIF()
  ELSE()
    IF (TPL_ENABLE_CUSPARSE)
      SET(KOKKOSKERNELS_ENABLE_TPL_CUSPARSE ${TPL_ENABLE_CUSPARSE})
    ENDIF()
  ENDIF()

  IF (DEFINED KOKKOSKERNELS_ENABLE_TPL_MAGMA)
    IF (KOKKOSKERNELS_ENABLE_TPL_MAGMA)  
      IF (NOT TPL_ENABLE_MAGMA)
        MESSAGE( WARNING "KOKKOSKERNELS_ENABLE_TPL_MAGMA is ON but TPL_ENABLE_MAGMA is OFF. Please set TPL_ENABLE_MAGMA:BOOL=ON")
        SET(KOKKOSKERNELS_ENABLE_TPL_MAGMA OFF)  
      ENDIF()
    ENDIF()
  ELSE()
    IF (TPL_ENABLE_MAGMA)
      SET(KOKKOSKERNELS_ENABLE_TPL_MAGMA ${TPL_ENABLE_MAGMA})
    ENDIF()
  ENDIF()
ENDIF()

IF (KOKKOSKERNELS_ENABLE_TPL_BLAS)
  LIST(APPEND TPL_LIST "BLAS")
ENDIF()
IF (KOKKOSKERNELS_ENABLE_TPL_MKL)
  LIST(APPEND TPL_LIST "MKL")
ENDIF()
IF (KOKKOSKERNELS_ENABLE_TPL_CUSPARSE)
  LIST(APPEND TPL_LIST "CUSPARSE")
ENDIF()
IF (KOKKOSKERNELS_ENABLE_TPL_CUBLAS)
  LIST(APPEND TPL_LIST "CUBLAS")
ENDIF()
IF (KOKKOSKERNELS_ENABLE_TPL_MAGMA)
  LIST(APPEND TPL_LIST "MAGMA")
  IF (F77_BLAS_MANGLE STREQUAL "(name,NAME) name ## _")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DADD_ -fopenmp -lgfortran")
  ELSEIF (F77_BLAS_MANGLE STREQUAL "(name,NAME) NAME")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUPCASE -fopenmp -lgfortran")
  ELSEIF (F77_BLAS_MANGLE STREQUAL "(name,NAME) name")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNOCHANGE -fopenmp -lgfortran")
  ELSE ()
    MESSAGE(FATAL_ERROR "F77_BLAS_MANGLE ${F77_BLAS_MANGLE} detected while MAGMA only accepts Fortran mangling that is one of single underscore (-DADD_), uppercase (-DUPCASE), and no change (-DNOCHANGE)")
  ENDIF()
ENDIF()

# ==================================================================
# Fortran Complex BLAS
# ==================================================================

IF (KOKKOSKERNELS_ENABLE_TPL_BLAS OR KOKKOSKERNELS_ENABLE_TPL_MKL)
  INCLUDE(CheckHostBlasReturnComplex.cmake)
  CHECK_HOST_BLAS_RETURN_COMPLEX(KOKKOSKERNELS_TPL_BLAS_RETURN_COMPLEX)
ENDIF()

# ==================================================================
# CMake Summary
# ==================================================================

INCLUDE(cmake/kokkos_requirements.cmake)

MESSAGE("")
MESSAGE("=======================")
MESSAGE("KokkosKernels ETI Types")
MESSAGE("   Devices:  ${DEVICE_LIST}")
MESSAGE("   Scalars:  ${SCALAR_LIST}")
MESSAGE("   Ordinals: ${ORDINAL_LIST}")
MESSAGE("   Offsets:  ${OFFSET_LIST}")
MESSAGE("")
MESSAGE("KokkosKernels TPLs")
MESSAGE("   ${TPL_LIST}")
MESSAGE("=======================")
MESSAGE("")

# ==================================================================
# Process subdirectories
# ==================================================================

<<<<<<< HEAD
=======
IF (KOKKOSKERNELS_HAS_TRILINOS)
  SET(TRILINOS_INCDIR ${CMAKE_INSTALL_PREFIX}/${${PROJECT_NAME}_INSTALL_INCLUDE_DIR})
  SET(KOKKOSKERNELS_HEADER_DIR ${TRILINOS_INCDIR})
ELSEIF(KOKKOSKERNELS_HAS_PARENT)
  SET(KOKKOSKERNELS_HEADER_DIR "include/kokkos-kernels")
ELSE()
  SET(KOKKOSKERNELS_HEADER_DIR "include")
ENDIF()
>>>>>>> cmake updates: #120 and #433

ADD_SUBDIRECTORY(src)

KOKKOS_ADD_TEST_DIRECTORIES(test_common)
KOKKOS_ADD_TEST_DIRECTORIES(perf_test)
KOKKOS_ADD_TEST_DIRECTORIES(unit_test)
#KOKKOS_ADD_EXAMPLE_DIRECTORIES(example)

KOKKOSKERNELS_PACKAGE_POSTPROCESS()


